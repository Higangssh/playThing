plugins {
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.24'
    id 'org.jetbrains.kotlin.jvm' version '1.9.24'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.24'
    id("org.jetbrains.kotlin.plugin.allopen") version "1.9.24" // Kotlin All-open 플러그인 (open 관련 설정)
    id("org.jetbrains.kotlin.plugin.noarg") version "1.9.24" // Kotlin No-arg 플러그인 (기본 생성
    id("org.jetbrains.kotlin.kapt") version "1.9.24" // 최신 Kapt 버전 사용
}

group = 'com.the'
version = '0.3.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation("jakarta.persistence:jakarta.persistence-api")
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("com.querydsl:querydsl-jpa:5.0.0:jakarta")
    kapt("com.querydsl:querydsl-apt:5.0.0:jakarta")
    kapt("org.springframework.boot:spring-boot-configuration-processor")
    //개발환경 변경 감지 재시작
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    //Kotiln 객체 - Json 변환
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.13.4")
    //Swageer
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    implementation 'com.github.therapi:therapi-runtime-javadoc:0.13.0'

    //Swagger doc
    annotationProcessor 'com.github.therapi:therapi-runtime-javadoc-scribe:0.13.0'

    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    runtimeOnly 'com.mysql:mysql-connector-j'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'com.h2database:h2'
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll '-Xjsr305=strict'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}


allOpen {
    annotation("javax.persistence.Entity") // @Entity 어노테이션이 붙은 클래스
    annotation("javax.persistence.MappedSuperclass") // @MappedSuperclass 어노테이션이 붙은 클래스
    annotation("javax.persistence.Embeddable") // @Embeddable 어노테이션이 붙은 클래스
}

// No-arg 플러그인 설정: 특정 어노테이션이 붙은 클래스에 기본 생성자를 추가합니다.
noArg {
    annotation("javax.persistence.Entity") // @Entity 어노테이션이 붙은 클래스
    annotation("javax.persistence.MappedSuperclass") // @MappedSuperclass 어노테이션이 붙은 클래스
    annotation("javax.persistence.Embeddable") // @Embeddable 어노테이션이 붙은 클래스
}